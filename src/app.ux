<script>
/**
* 应用级别的配置，供所有页面公用
*/
import util from './util'
import network from '@system.network'
import prompt from '@system.prompt'
import fetch from '@system.fetch'
import shortcut from '@system.shortcut'
import storage from '@system.storage'
import device from '@system.device'

const injectRef = Object.getPrototypeOf(global) || global
import WANKA_AD_SDK from './WankaAdSDK/dist/wanka_ad_sdk.min.js'
// 注入regeneratorRuntime
injectRef.regeneratorRuntime = require('@babel/runtime/regenerator')

import './umenganalysis.es.min'//友盟

export default {
  IMEI: '',
  DeviceId:'',
  token: '',
  userInfo: {},
  hadLogin: false,
  bookShelfList: [],
  showAddShortcut: false,
  showMenu: util.showMenu,
  createShortcut: util.createShortcut,
  domain: util.domain,
  domainH5: util.domainH5,
  sign: util.sign,
  vertion: util.vertion,
  filterDevices: util.filterDevices,
  wanka_ssp_sdk: {},// 声明广告 sdk 对象
  cfg: {},

  onCreate() {
    const self = this

    shortcut.systemPromptEnabled = false
    $umeng_stat.init(this)  //友盟埋点初始化，必须添加！！

    //获取设备唯一标识 imei
    device.getDeviceId({
      success: data => {
        console.log('app.ux IMEI', data)
        self.$def.IMEI = data.deviceId
      },
      fail: (data, code) => {
        self.$def.IMEI = ''
      }
    })

    device.getUserId({
      success: function (data) {
        self.$def.DeviceId = data.userId
      },
      fail: function (data, code) {
        self.$def.DeviceId = ''
        console.log(`handling fail, code = ${code}`)
      }
    })

    network.getType({
      success: (data) => {
        let networkData = data
        if (networkData.type == 'none') {
          prompt.showToast({
            message: '网络未连接，请设置网络',
            duration: 1
          })
          setTimeout(() => this.exit(), 3000)
        }
      }
    })


    storage.get({
      key: 'userLoginToken',
      success: data => {
        if ((data != '') && (data != undefined)) {
          self.$def.token = data
        }
      },
      fail: function (data, code) {
        console.log(`app.ux 获取token handling fail, code = ${code}`)
        self.$def.token = ''
      }
    })

    try {
      self.$def.wanka_ssp_sdk = new WANKA_AD_SDK(this, '/TabBar')//把将要在广告退去后展示的页面传给广告sdk
    } catch (error) {
      console.log('error', error)
    }

  },

  onDestroy() {
  },
}

</script>