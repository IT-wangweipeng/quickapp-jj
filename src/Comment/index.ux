<import name="titleBar" src="./../common/titleBar"></import>
<import name="wanka-ad-view" src="./../WankaAdSDK/dist/Ad-component/view"></import>
<template>
  <div class="doc-page">
    <!-- Ëá™ÂÆö‰πâtitle -->
    <div class="title">
      <titleBar show="true" title="‰π¶Á±çËØÑËÆ∫" onleft-button-clicked="onLeftButtonClicked" left-button="./../Common/images/arrow-left-1.png"></titleBar>
    </div>
    <list class="list" onscrollbottom="scrollbottomList">
      <block for="list">
        <list-item type="adShow" class="content-item" if="{{($idx+1)%5===0}}" show="{{showAd}}">
          <div class="ad-position" show="{{showAd}}">
            <wanka-ad-view type="native" adslot_id="{{ nativeAdId }}" @ad-error="onadError" @ad-closed="onadClosed" @ad-show="onadShow"></wanka-ad-view>
          </div>
        </list-item>
        <list-item type="product" class="content-item" else>
          <div class="comment-content">
            <image class="img-head" src="{{$item.avatar==''?'./../Common/images/cm-head.png':$item.avatar}}"></image>
            <div class="txt-item">
              <div class="r-txt">
                <text class="u-name">{{ $item.nick }}</text>
                <text class="u-level">LV {{ $item.level }}</text>
              </div>
              <div class="r-txt">
                <rating class="rating" numstars="5" rating="{{$item.vote}}" stepsize="0.5" indicator="false"></rating>
                <text class="rating-txt">{{ $item.vote }}ËØÑÂàÜ</text>
              </div>
              <text class="cons">{{ $item.content }}</text>
              <div class="r-txt comment-bw">
                <text class="d-txt">{{ $item.date }}</text>
                <text class="d-txt">{{ $item.likeNum }} üëç</text>
              </div>
            </div>
          </div>
        </list-item>
      </block>
      <list-item type="loadStatus" class="load-status">
        <progress type="circular" show="{{ hasMoreData }}"></progress>
        <text show="{{ hasMoreData }}">Âä†ËΩΩ‰∏≠...</text>
        <text show="{{ !hasMoreData }}">Ê≤°ÊúâÊõ¥Â§ö‰∫Ü~</text>
      </list-item>
    </list>
  </div>
</template>
<style lang="less">
@import "./../Common/css/common.css";
.doc-page {
  flex-direction: column;
  background-color: #ffffff;
  .list {
    flex-direction: column;
    justify-content: center;
    padding-left: 30px;
    padding-right: 30px;
    .content-item {
      border-color: #bbbbbb;
      border-bottom-width: 1px;
      width: 100%;
      padding: 15px 0;
      .comment-content {
        flex-direction: row;
        .img-head {
          margin-top: 10px;
          width: 80px;
          border-radius: 40px;
        }
        .txt-item {
          margin-top: 5px;
          margin-left: 15px;
          flex-direction: column;
          .cons {
            margin-bottom: 15px;
            font-size: 28px;
            line-height: 38px;
          }
          .comment-bw {
            padding-bottom: 10px;
            justify-content: space-between;
          }
          .r-txt {
            flex-direction: row;
            margin-bottom: 15px;
            .u-name {
              line-height: 40px;
              color: #3b3b3b;
            }
            .u-level {
              margin-top: 10px;
              margin-left: 15px;
              padding: 2px;
              background-color: #0faeff;
              color: #fafdfa;
              font-size: 22px;
              height: 22px;
            }
            .rating {
              star-background: url(./star/star-1-1.png);
              star-secondary: url(./star/star-1-2.png);
              star-foreground: url(./star/star-1-3.png);
              width: 150px;
              height: 28px;
            }
            .rating-txt {
              font-size: 24px;
              margin-left: 24px;
              height: 28px;
              line-height: 28px;
            }
            .d-txt {
              font-size: 24px;
              height: 28px;
              line-height: 28px;
            }
          }
        }
      }
    }
    .load-status {
      justify-content: center;
      align-items: center;
      height: 100px;
      border-color: #bbbbbb;
      border-bottom-width: 1px;
    }
  }
  .ad-position {
    width: 100%;
    height: 340px;
  }
  .loader {
    width: 150px;
    height: 150px;
    background-image: url("./../Common/images/load.png");
    background-size: 100%;
    position: fixed;
    left: 330px;
    bottom: 600px;
    animation-name: rotate;
    animation-duration: 500ms;
    animation-iteration-count: 200;
    animation-timing-function: linear;
  }
  @keyframes rotate {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
}
</style>
<script>
import prompt from '@system.prompt'
import router from '@system.router'
import fetch from '@system.fetch'
import storage from '@system.storage'
import share from '@system.share'
import device from '@system.device'
export default {
  private: {
    hasMoreData: true,
    list: [], //
    IMEI: '',
    nativeAdId: '4077', // ÂπøÂëä‰Ωç id Ôºö
    showAd: true,
    page: 1,
    pageSize: 20
  },
  public: {
    bookId: ''
  },
  onInit() {
    //Ëé∑ÂèñËÆæÂ§áidÂç≥IMEI
    this.getIMEI()
    let t = new Date().getTime()
    let s = this.$app.$def.sign(t)
    let v = this.$app.$def.vertion()
    let test_domain = this.$app.domain() //Ëé∑ÂèñÊµãËØïÂüüÂêç
    let comment_url = test_domain + '/book/comment'
    fetch.fetch({
      url: comment_url,
      data: {
        v: v,
        t: t,
        s: s,
        bookId: this.bookId,
        page: this.page,
        pageSize: '20'
      },
      success: response => {
        this.showLoad = 'display: none'
        let result = JSON.parse(response.data)
        let comment_list = result.body.data
        let comment_page = result.body.page
        if (comment_list != null && comment_list != undefined && comment_list.length > 0) {
          for (let x = 0; x < comment_list.length; x++) {
            comment_list[x].date = this.getDates(comment_list[x].date)
          }
          this.list = this.list.concat(comment_list)
        }
        if (comment_page != null && comment_page != undefined) {
          if (comment_page.total_page != null && comment_page.total_page != undefined) {
            if (comment_page.total_page > 0 && this.page >= comment_page.total_page) {
              this.hasMoreData = false
            } else {
              this.hasMoreData = true
            }
          } else {
            this.hasMoreData = false
          }
        } else {
          this.hasMoreData = false
        }
      }
    })
  },
  onShow() {
    $umeng_stat.resume(this) //ÊêúÁ¥¢È°µÁªüËÆ°È°µÈù¢ÂÅúÁïôÊó∂Èó¥
  },
  onHide() {
    $umeng_stat.pause(this)
  },
  scrollbottomList() {
    let t = new Date().getTime()
    let s = this.$app.$def.sign(t)
    let v = this.$app.$def.vertion()
    let test_domain = this.$app.domain() //Ëé∑ÂèñÊµãËØïÂüüÂêç
    let comment_url = test_domain + '/book/comment'
    this.page += 1
    fetch.fetch({
      url: comment_url,
      data: {
        v: v,
        t: t,
        s: s,
        bookId: this.bookId,
        page: this.page,
        pageSize: '20'
      },
      success: response => {
        this.showLoad = 'display: none'
        let result = JSON.parse(response.data)
        let comment_list = result.body.data
        let comment_page = result.body.page
        if (comment_list != null && comment_list != undefined && comment_list.length > 0) {
          for (let x = 0; x < comment_list.length; x++) {
            comment_list[x].date = this.getDates(comment_list[x].date)
          }
          this.list = this.list.concat(comment_list)
        }
        if (comment_page != null && comment_page != undefined && comment_page.total_page != null && comment_page.total_page != undefined) {
          if (comment_page.total_page > 0 && this.page >= comment_page.total_page) {
            this.hasMoreData = false
          } else {
            this.hasMoreData = true
          }
        } else {
          this.hasMoreData = false
        }
      }
    })
  },
  onLeftButtonClicked() {
    router.back()
  },
  getIMEI() {
    //Ëé∑ÂèñËÆæÂ§áÂîØ‰∏ÄÊ†áËØÜ imei
    storage.get({
      key: 'IMEI',
      success: ret => {
        this.IMEI = ret
      }
    })
  }, // ÂπøÂëäÊòæÁ§∫
  onadShow(args) {
    // ÂπøÂëäËØ∑Ê±ÇÊï∞	‚àö	ad_request
    $umeng_stat.trackEvent('ad_request', { user_id: this.IMEI, ad_id: this.nativeAdId })
    // ÂπøÂëäÂ±ïÁ§∫Êï∞	‚àö	ad_expose
    $umeng_stat.trackEvent('ad_expose', { user_id: this.IMEI, ad_id: this.nativeAdId })
  },

  // ÁÇπÂáªÂπøÂëä
  onadClick(args) {
    // ÂπøÂëäÁÇπÂáªÊï∞	‚àö	ad_click
    $umeng_stat.trackEvent('ad_click', { user_id: this.IMEI, ad_id: this.nativeAdId })
  },
  // Âä†ËΩΩÂ§±Ë¥•
  onadError(args) {
    this.showAd = false
    // prompt.showToast({
    //     message: `WankaAd load failed. error_code: ${ args.detail.error_code }, error_msg: ${ args.detail.error_msg }`,
    // 	duration: 1
    // })
  },
  // ÂÖ≥Èó≠ÂπøÂëä
  onadClosed(args) {
    this.showAD = false
  }, getDates(t) {
    if (t <= 9999999999) {
      t = t * 1000
    }
    let date = new Date(t)
    let Y = date.getFullYear() + '-'
    let M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-'
    let D = (date.getDate() < 10 ? '0' + date.getDate() : date.getDate()) + ' '
    let h = (date.getHours() < 10 ? '0' + date.getHours() : date.getHours()) + ':'
    let m = (date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()) + ':'
    let s = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds()
    return Y + M + D + h + m + s
  }
}
</script>
